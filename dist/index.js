'use strict';

var a=class{constructor(e){this.next=e;}handleNext(e,t){return this.next?this.next.handle(e,t):e}};var r=class{static check(e){let t=Reflect.apply(Object.prototype.toString,e,[]);return t.slice(t.indexOf(" ")+1,t.indexOf("]")).toLowerCase()}static isDate(e){return this.check(e)==="date"}static isObject(e){return this.check(e)==="object"}static isArray(e){return Array.isArray(e)}static isMap(e){return this.check(e)==="map"}static isSet(e){return this.check(e)==="set"}};var f=class extends a{handle(e,t){return r.isArray(e)?this.createCloneOf(e,t):this.handleNext(e,t)}createCloneOf(e,t){return e.map(t)}};var x=class extends a{handle(e,t){return r.isDate(e)?new Date(e):this.handleNext(e,t)}};var h=class extends Error{constructor(e){super(e),this.name="CloneExceptionError";}};var p=class{static execute(e,t){try{return this.performClone(e,t)}catch(o){if(o instanceof Error)throw new h(o.message)}}static performClone(e,t){let o=this.createCloneOf(e),i=this.propertyDescriptorsOf(e);for(let l of Reflect.ownKeys(i))this.isEligibleToAssign(i,l)&&(o[l]=t(Reflect.get(o,l)));return o}static createCloneOf(e){return Object.create(this.prototypeOf(e),this.propertyDescriptorsOf(e))}static prototypeOf(e){return Object.getPrototypeOf(e)}static propertyDescriptorsOf(e){return Object.getOwnPropertyDescriptors(e)}static isEligibleToAssign(e,t){return e[String(t)]&&Reflect.has(e[String(t)],"value")}};var d=class extends a{handle(e,t){return r.isObject(e)?p.execute(e,t):this.handleNext(e,t)}};var m=class extends a{handle(e,t){return r.isMap(e)?this.createCloneOf(e,t):this.handleNext(e,t)}createCloneOf(e,t){let o=new Map(e);return e.forEach((i,l)=>o.set(l,t(i))),o}};var k=class extends a{handle(e,t){return r.isSet(e)?this.createCloneOf(e,t):this.handleNext(e,t)}createCloneOf(e,t){let o=new Set(e);return e.forEach(i=>o.add(t(i))),o}};var c=class{static execute(e){if(!this.recursivelyHandler){let t=new d,o=new f(t),i=new m(o),l=new k(i),B=new x(l);this.recursivelyHandler=B;}return this.recursivelyHandler.handle(e,this.execute.bind(this))}};var s=class{constructor(e){this.next=e;}handleNext(e,t){return this.next?this.next.handle(e,t):e}freeze(e){return Object.freeze(e)}};var b=class extends s{handle(e,t){return r.isArray(e)?this.freeze(this.createCloneOf(c.execute(e),t)):this.handleNext(e,t)}createCloneOf(e,t){return e.map(t)}};var C=class extends Error{constructor(){super("Cannot assign to immutable Map"),this.name="CannotAssignToImmutableMapError";}};var S=class extends s{handle(e,t){return r.isMap(e)?this.freezeMap(e):this.handleNext(e,t)}freezeMap(e){return e.set=this.throwError,e.delete=this.throwError,e.clear=this.throwError,this.freeze(e)}throwError(){throw new C}};var w=class extends s{handle(e,t){return r.isObject(e)?this.freeze(p.execute(c.execute(e),t)):this.handleNext(e,t)}};var T=class extends Error{constructor(){super("Cannot assign to immutable Set"),this.name="CannotAssignToImmutableSetError";}};var y=class extends s{handle(e,t){return r.isSet(e)?this.freezeSet(e):this.handleNext(e,t)}freezeSet(e){return e.add=this.throwError,e.delete=this.throwError,e.clear=this.throwError,this.freeze(e)}throwError(){throw new T}};var v=class extends s{handle(e,t){return r.isDate(e)?this.freeze(c.execute(e)):this.handleNext(e,t)}};var E=class{static execute(e){if(!this.recursivelyHandler){let t=new y,o=new S(t),i=new w(o),l=new b(i),B=new v(l);this.recursivelyHandler=B;}return this.recursivelyHandler.handle(e,this.execute.bind(this))}};var z=class{static execute(e,t){t(e);}};var g={freeze:!0},u=class u{constructor(e){this.config=e;}static get global(){return {not:{freeze:()=>{this.globalImmuterInstance=new u({freeze:!1});}},freeze:()=>{this.globalImmuterInstance=new u(g);}}}static get not(){return {freeze:new u({freeze:!1})}}static produce(e,t){return this.globalImmuterInstance.produce(e,t)}static clone(e){return this.globalImmuterInstance.clone(e)}clone(e){let t=c.execute(e);return this.execute(t)}execute(e){return this.freezeIfNecessary(e)}freezeIfNecessary(e){return this.config.freeze?E.execute(e):e}produce(e,t){let o=c.execute(e);return z.execute(o,t),this.execute(o)}};u.globalImmuterInstance=new u(g);var H=u;

exports.Immuter = H;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map